{"version":3,"file":"static/js/673.86c70c25.chunk.js","mappings":"uQA2CA,EAvCkB,SAAC,GASZ,IAAD,QARJA,MACEC,EAOE,EAPFA,YACAC,EAME,EANFA,MACAC,EAKE,EALFA,aACAC,EAIE,EAJFA,aACAC,EAGE,EAHFA,SAGE,IAFFC,OAAAA,OAEE,MAFO,GAEP,EACEC,GAAWC,EAAAA,EAAAA,MACXC,GAAsBC,EAAAA,EAAAA,QAAM,oBAACH,EAASI,aAAV,aAAC,EAAgBC,YAAjB,QAAyB,WAE3D,OACE,4BACE,SAAC,KAAD,CAAMC,GAAIJ,EAAoBK,QAA9B,UACE,mBAAQC,KAAK,SAAb,4BAGF,0BACE,gBACEC,IAAG,0CAAqCf,GACxCgB,IAAKf,EACLgB,MAAM,aAGV,gCACE,0BACGhB,EADH,IACWE,EADX,QAGA,0CAAkBe,KAAKC,MAAqB,GAAfjB,GAA7B,QACA,sCACA,uBAAIE,KACJ,oCACA,uBAAIC,EAAOe,KAAI,SAAAC,GAAK,OAAIA,EAAMC,IAAV,IAAgBC,KAAK,aAIhD,E,SCKD,EAzCqB,WACnB,OAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOzB,EAAP,KAAc0B,EAAd,KACA,GAA0BD,EAAAA,EAAAA,UAAS,MAAnC,eAAOE,EAAP,KAAcC,EAAd,KACA,GAA8BH,EAAAA,EAAAA,WAAS,GAAvC,eAAOI,EAAP,KAAgBC,EAAhB,KACQC,GAAaC,EAAAA,EAAAA,MAAbD,SAiBR,OAfAE,EAAAA,EAAAA,YAAU,WACRH,GAAW,GACX,IAAMI,EAAgB,mCAAG,8GAEEC,EAAAA,EAAAA,IAAgBJ,GAFlB,OAEfK,EAFe,OAGrBV,EAASU,GAHY,gDAKrBR,EAAS,EAAD,IALa,yBAOrBE,GAAW,GAPU,4EAAH,qDAUtBI,GACD,GAAE,CAACH,KAGF,gCACGJ,IAAS,kDACTE,IAAW,SAACQ,EAAA,EAAD,KACZ,SAAC,EAAD,CAAWrC,MAAOA,KAClB,2BACE,yBACE,SAAC,KAAD,CAASa,GAAG,OAAZ,qBAEF,yBACE,SAAC,KAAD,CAASA,GAAG,UAAZ,2BAGJ,SAAC,EAAAyB,SAAD,WACE,SAAC,KAAD,CAAQC,UAAU,SAACF,EAAA,EAAD,UAIzB,C,+LC3CKG,EAAM,mCAGL,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,sGACkBC,EAAAA,EAAAA,IAAA,mCAAsCF,IADxD,uBACGG,EADH,EACGA,KADH,kBAEEA,GAFF,kEAIA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA+BC,GAA/B,yFACkBH,EAAAA,EAAAA,IAAA,gCACIF,EADJ,kBACiBK,EADjB,YADlB,uBACGF,EADH,EACGA,KADH,kBAIEA,GAJF,kEAOA,SAAeR,EAAtB,+CAAO,OAAP,oBAAO,WAA+BW,GAA/B,yFACkBJ,EAAAA,EAAAA,IAAA,gBAAmBI,EAAnB,oBAAuCN,IADzD,uBACGG,EADH,EACGA,KADH,kBAEEA,GAFF,kEAIA,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,WAA+BD,GAA/B,yFACkBJ,EAAAA,EAAAA,IAAA,gBAAmBI,EAAnB,4BAA+CN,IADjE,uBACGG,EADH,EACGA,KADH,kBAEEA,GAFF,kEAIA,SAAeK,EAAtB,+CAAO,OAAP,oBAAO,WAA+BF,GAA/B,yFACkBJ,EAAAA,EAAAA,IAAA,gBAAmBI,EAAnB,4BAA+CN,IADjE,uBACGG,EADH,EACGA,KADH,kBAEEA,GAFF,kEArBPD,EAAAA,EAAAA,SAAAA,QAAyB,+B","sources":["components/MovieItem/MovieItem.jsx","pages/MovieDetails.jsx","services/GetMovies.jsx"],"sourcesContent":["import { Link, useLocation } from 'react-router-dom';\nimport { useRef } from 'react';\nimport PropTypes from 'prop-types';\n\nconst MovieInfo = ({\n  movie: {\n    poster_path,\n    title,\n    vote_average,\n    release_date,\n    overview,\n    genres = [],\n  },\n}) => {\n  const location = useLocation();\n  const backLinkLocationRef = useRef(location.state?.from ?? '/movies');\n\n  return (\n    <div>\n      <Link to={backLinkLocationRef.current}>\n        <button type=\"button\">Return back</button>\n      </Link>\n\n      <div>\n        <img\n          src={`https://image.tmdb.org/t/p/w500/${poster_path}`}\n          alt={title}\n          width=\"200px\"\n        ></img>\n      </div>\n      <section>\n        <h2>\n          {title}({release_date})\n        </h2>\n        <span>User score:{Math.round(vote_average * 10)}%</span>\n        <h3>Overview</h3>\n        <p>{overview}</p>\n        <h4>Genres</h4>\n        <p>{genres.map(genre => genre.name).join(', ')}</p>\n      </section>\n    </div>\n  );\n};\nexport default MovieInfo;\n\nMovieInfo.propTypes = {\n  movie: PropTypes.shape({\n    poster_path: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    vote_average: PropTypes.string.isRequired,\n    release_date: PropTypes.string.isRequired,\n    overview: PropTypes.string.isRequired,\n    genres: PropTypes.array.isRequired,\n  }),\n};\n","import { useState, useEffect, Suspense } from 'react';\nimport { useParams, NavLink, Outlet } from 'react-router-dom';\nimport { getMovieDetails } from '../services/GetMovies';\nimport MovieInfo from '../components/MovieItem/MovieItem';\nimport { Loader } from '../components/Loader/Loader';\n\nconst MovieDetails = () => {\n  const [movie, setMovie] = useState([]);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const { moviesId } = useParams();\n\n  useEffect(() => {\n    setLoading(true);\n    const movieDetailFetch = async () => {\n      try {\n        const response = await getMovieDetails(moviesId);\n        setMovie(response);\n      } catch (error) {\n        setError(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    movieDetailFetch();\n  }, [moviesId]);\n\n  return (\n    <>\n      {error && <p>Sorry try another film</p>}\n      {loading && <Loader />}\n      <MovieInfo movie={movie} />\n      <ul>\n        <li>\n          <NavLink to=\"cast\">Cast</NavLink>\n        </li>\n        <li>\n          <NavLink to=\"reviews\">Reviews</NavLink>\n        </li>\n      </ul>\n      <Suspense>\n        <Outlet fallback={<Loader />} />\n      </Suspense>\n    </>\n  );\n};\n\nexport default MovieDetails;\n","import axios from 'axios';\n\nconst KEY = '2ee3138b7264f5045a82f30264daff8e';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport async function getTrendingMovies() {\n  const { data } = await axios.get(`trending/all/day?api_key=${KEY}`);\n  return data;\n}\nexport async function getSearchMovies(query) {\n  const { data } = await axios.get(\n    `/search/movie?api_key=${KEY}&query=${query}&page=1`\n  );\n  return data;\n}\n\nexport async function getMovieDetails(movie_id) {\n  const { data } = await axios.get(`movie/${movie_id}?api_key=${KEY}`);\n  return data;\n}\nexport async function getMovieCredits(movie_id) {\n  const { data } = await axios.get(`movie/${movie_id}/credits?api_key=${KEY}`);\n  return data;\n}\nexport async function getMovieReviews(movie_id) {\n  const { data } = await axios.get(`movie/${movie_id}/reviews?api_key=${KEY}`);\n  return data;\n}\n"],"names":["movie","poster_path","title","vote_average","release_date","overview","genres","location","useLocation","backLinkLocationRef","useRef","state","from","to","current","type","src","alt","width","Math","round","map","genre","name","join","useState","setMovie","error","setError","loading","setLoading","moviesId","useParams","useEffect","movieDetailFetch","getMovieDetails","response","Loader","Suspense","fallback","KEY","getTrendingMovies","axios","data","getSearchMovies","query","movie_id","getMovieCredits","getMovieReviews"],"sourceRoot":""}